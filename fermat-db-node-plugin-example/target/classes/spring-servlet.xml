<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <tx:annotation-driven transaction-manager="transactionManager"/>

    <bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
        <property name="poolName" value="springHikariCP"/>
        <property name="connectionTestQuery" value="SELECT 1"/>
        <property name="driverClassName" value="org.sqlite.JDBC"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="maximumPoolSize" value="${jdbc.maximumPoolSize}"/>
        <!--<property name="autoCommit" value="false"/>-->

        <property name="transactionIsolation" value="TRANSACTION_READ_UNCOMMITTED"/>

        <!--<property name="connectionInitSql" value="SET time_zone='${database.timezone}'"/>-->
    </bean>
    <!-- HikariCP configuration -->
    <bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
        <constructor-arg ref="hikariConfig"/>
    </bean>

    <!-- Configure Spring's transaction manager to use a DataSource -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- Configure jOOQ's TransactionProvider as a proxy to Spring's transaction manager -->
    <bean id="transactionProvider" class="com.bitdubai.fermat.node.db.tx.SpringTransactionProvider"/>

    <!-- Configure jOOQ's ConnectionProvider to use Spring's TransactionAwareDataSourceProxy,
         which can dynamically discover the transaction context -->
    <bean id="transactionAwareDataSource" class="org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy">
        <constructor-arg ref="dataSource"/>
    </bean>

    <bean class="org.jooq.impl.DataSourceConnectionProvider" name="connectionProvider">
        <constructor-arg ref="transactionAwareDataSource"/>
    </bean>

    <!-- Configure the DSL object, optionally overriding jOOQ Exceptions with Spring Exceptions -->
    <bean id="dsl" class="org.jooq.impl.DefaultDSLContext">
        <constructor-arg ref="config"/>
    </bean>

    <bean id="exceptionTranslator" class="com.bitdubai.fermat.node.db.exception.ExceptionTranslator"/>

    <!-- Invoking an internal, package-private constructor for the example
         Implement your own Configuration for more reliable behaviour -->
    <bean class="org.jooq.impl.DefaultConfiguration" name="config">
        <property name="SQLDialect">
            <value type="org.jooq.SQLDialect">SQLITE</value>
        </property>
        <property name="connectionProvider" ref="connectionProvider"/>
        <property name="transactionProvider" ref="transactionProvider"/>
        <property name="executeListenerProvider">
            <array>
                <bean class="org.jooq.impl.DefaultExecuteListenerProvider">
                    <constructor-arg index="0" ref="exceptionTranslator"/>
                </bean>
            </array>
        </property>
    </bean>

    <context:annotation-config/>
    <context:component-scan base-package="com.bitdubai.fermat.node.db"/>

    <context:property-placeholder
        location="classpath:config-${envTarget}.properties,classpath:persistence-${envTarget}.properties"
        ignore-unresolvable="true"/>

    <bean id="nodesCatalogDao" class="com.bitdubai.fermat.db.sqlite.generated.tables.daos.NodesCatalogDao">
        <constructor-arg ref="config"/>
    </bean>

</beans>