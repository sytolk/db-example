/**
 * This class is generated by jOOQ
 */
package com.bitdubai.fermat.db.sqlite.generated.tables.pojos;


import java.io.Serializable;

import javax.annotation.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.3"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NodesCatalog implements Serializable {

	private static final long serialVersionUID = -2053936535;

	private String  identityPublicKey;
	private String  name;
	private String  ip;
	private Integer defaultPort;
	private Float   latitude;
	private Float   longitude;
	private Integer lateNotificationCounter;
	private Integer offlineCounter;
	private Integer registeredTimestamp;
	private Integer lastConnectionTimestamp;

	public NodesCatalog() {}

	public NodesCatalog(NodesCatalog value) {
		this.identityPublicKey = value.identityPublicKey;
		this.name = value.name;
		this.ip = value.ip;
		this.defaultPort = value.defaultPort;
		this.latitude = value.latitude;
		this.longitude = value.longitude;
		this.lateNotificationCounter = value.lateNotificationCounter;
		this.offlineCounter = value.offlineCounter;
		this.registeredTimestamp = value.registeredTimestamp;
		this.lastConnectionTimestamp = value.lastConnectionTimestamp;
	}

	public NodesCatalog(
		String  identityPublicKey,
		String  name,
		String  ip,
		Integer defaultPort,
		Float   latitude,
		Float   longitude,
		Integer lateNotificationCounter,
		Integer offlineCounter,
		Integer registeredTimestamp,
		Integer lastConnectionTimestamp
	) {
		this.identityPublicKey = identityPublicKey;
		this.name = name;
		this.ip = ip;
		this.defaultPort = defaultPort;
		this.latitude = latitude;
		this.longitude = longitude;
		this.lateNotificationCounter = lateNotificationCounter;
		this.offlineCounter = offlineCounter;
		this.registeredTimestamp = registeredTimestamp;
		this.lastConnectionTimestamp = lastConnectionTimestamp;
	}

	public String getIdentityPublicKey() {
		return this.identityPublicKey;
	}

	public void setIdentityPublicKey(String identityPublicKey) {
		this.identityPublicKey = identityPublicKey;
	}

	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getIp() {
		return this.ip;
	}

	public void setIp(String ip) {
		this.ip = ip;
	}

	public Integer getDefaultPort() {
		return this.defaultPort;
	}

	public void setDefaultPort(Integer defaultPort) {
		this.defaultPort = defaultPort;
	}

	public Float getLatitude() {
		return this.latitude;
	}

	public void setLatitude(Float latitude) {
		this.latitude = latitude;
	}

	public Float getLongitude() {
		return this.longitude;
	}

	public void setLongitude(Float longitude) {
		this.longitude = longitude;
	}

	public Integer getLateNotificationCounter() {
		return this.lateNotificationCounter;
	}

	public void setLateNotificationCounter(Integer lateNotificationCounter) {
		this.lateNotificationCounter = lateNotificationCounter;
	}

	public Integer getOfflineCounter() {
		return this.offlineCounter;
	}

	public void setOfflineCounter(Integer offlineCounter) {
		this.offlineCounter = offlineCounter;
	}

	public Integer getRegisteredTimestamp() {
		return this.registeredTimestamp;
	}

	public void setRegisteredTimestamp(Integer registeredTimestamp) {
		this.registeredTimestamp = registeredTimestamp;
	}

	public Integer getLastConnectionTimestamp() {
		return this.lastConnectionTimestamp;
	}

	public void setLastConnectionTimestamp(Integer lastConnectionTimestamp) {
		this.lastConnectionTimestamp = lastConnectionTimestamp;
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("NodesCatalog (");

		sb.append(identityPublicKey);
		sb.append(", ").append(name);
		sb.append(", ").append(ip);
		sb.append(", ").append(defaultPort);
		sb.append(", ").append(latitude);
		sb.append(", ").append(longitude);
		sb.append(", ").append(lateNotificationCounter);
		sb.append(", ").append(offlineCounter);
		sb.append(", ").append(registeredTimestamp);
		sb.append(", ").append(lastConnectionTimestamp);

		sb.append(")");
		return sb.toString();
	}
}
